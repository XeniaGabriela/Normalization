                     SINGULAR                             /
 A Computer Algebra System for Polynomial Computations   /   version 3-1-1
                                                       0<
     by: G.-M. Greuel, G. Pfister, H. Schoenemann        \   Feb 2010
FB Mathematik der Universitaet, D-67653 Kaiserslautern    \
> ring r=0,(x,y),dp;
> ideal i=x4;
> ideal j1=x3,y2;
> ideal j2=x,y;
> proc myquotient(i,j1,j2) {                                                 //computes the quotient of three arguments i,j1,j2
	def BAS=basering;
	int j;
	ideal q=1;                                                        
	for(j=1; j <= size(j2); j++){                                      //if the ideal j2=(f_1,...,f_s), so for all generators f_i of j2 
		ideal s=j2[j],-j1,-i;                                      //let ideal s=(f_i,-j1,-i), then compute the matrix m of syzygies of s
		matrix m=matrix(syz(s));                                   //take the ideal qq generated by the first row of the matrix m                      
		m=m[1,1..ncols(m)];                                        //the intersection of all those ideals is the quotient
		matrix n[1][ncols(m)]=m[1,1..ncols(m)];
		ideal qq=n;
		q=intersect(q,qq);
	}
	return(std(q));
};
> myquotient(i,j1,j2);
// ** redefining s **
// ** redefining m **
// ** redefining n **
// ** redefining qq **
_[1]=y2
_[2]=x2y
_[3]=x3
> quotient(j1,j2);
_[1]=y2
_[2]=x2y
_[3]=x3
> i=x2;
> myquotient(i,j1,j2);
// ** redefining s **
// ** redefining m **
// ** redefining n **
// ** redefining qq **
_[1]=y2
_[2]=xy
_[3]=x2
> i=x;
>  myquotient(i,j1,j2);
// ** redefining s **
// ** redefining m **
// ** redefining n **
// ** redefining qq **
_[1]=y
_[2]=x
> 