

FEHERSUCHE mynormal(x3+6z3):

> ideal i=x3+6z3;
x3+6z3
> i;
i[1]=x3z4-x3y3-y2z4+y5
> ideal i=x3+6z3;
// ** redefining i **
> i;
i[1]=x3+6z3
> mynormal(i);
   ? wrong range[1,3] in matrix syzfi(4 x 2)
   ? error occurred in or before ::homjj line 84: `     matrix syzfii[n][n]=syzfi[1..n,1..n];`
   ? expected matrix-expression. type 'help matrix;'
   ? leaving ::homjj
   skipping text from `;` error at token `)`
   ? leaving ::mynormal
> ideal j=testideal(i);
> j;
j[1]=6z
j[2]=-x
> list h =homjj(i,j);
   ? wrong range[1,3] in matrix syzfi(4 x 2)
   ? error occurred in or before ::homjj line 84: `     matrix syzfii[n][n]=syzfi[1..n,1..n];`
   ? expected matrix-expression. type 'help matrix;'
   ? leaving ::homjj
   skipping text from `;` error at token `)`
> poly a=j[1];
> a;
6z
> ideal aJJ=myquotient(i,a*j,j),i;
> aJJ;
aJJ[1]=-6z
aJJ[2]=6x2
aJJ[3]=-x3
aJJ[4]=x3+6z3
> aJJ=std(aJJ);
> ideal aa=a;
> aa=std(aa);
> aa;
aa[1]=6z
> ideal rf = interred(reduce(aJJ,aa));
> rf;
rf[1]=6x2
rf[2]=x3
> ideal f=j[1],rf;
> f;
f[1]=6z
f[2]=6x2
f[3]=x3
> kill n;
> int n = size(f);
> n;
3
> ring newR1 = integer,(X(1..nvars(rz )),T(1..n)),dp;
> newR1;
//   coeff. ring is : Integers
//   number of vars : 6
//        block   1 : ordering dp
//                  : names    X(1) X(2) X(3) T(1) T(2) T(3)
//        block   2 : ordering C
> ideal f=fetch(rz ,f);
> ideal i=fetch(rz,i);
> f,i;
f[1]=6*X(3)
f[2]=6*X(1)^2
f[3]=X(1)^3 i[1]=X(1)^3+6*X(3)^3
> f;
f[1]=6*X(3)
f[2]=6*X(1)^2
f[3]=X(1)^3
> i;
i[1]=X(1)^3+6*X(3)^3
> ideal Q=i;
> Q;
Q[1]=X(1)^3+6*X(3)^3
> poly a=fetch(rz,a);
> a;
6*X(3)
> ideal af=a*f,i;
> matrix T=matrix(ideal(T(1..n)),1,n);
> af;
af[1]=36*X(3)^2
af[2]=36*X(1)^2*X(3)
af[3]=6*X(1)^3*X(3)
af[4]=X(1)^3+6*X(3)^3
> T;
T[1,1]=T(1)
T[1,2]=T(2)
T[1,3]=T(3)
> int ii,jj,kk;
> matrix A;
> A=lift(af,f[1 ]*f[1 ]);
> A;
A[1,1]=1
A[2,1]=0
A[3,1]=0
A[4,1]=0
>  poly q=0;
> for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   };
> q;
36*X(3)^2
> f[1]*f[1];
36*X(3)^2
> matrix AA[n][1]=A[1..n,1];
> AA;
AA[1,1]=1
AA[2,1]=0
AA[3,1]=0
> Q = Q,ideal(T(1 )*T(1 ) - T*AA);
> Q;
Q[1]=X(1)^3+6*X(3)^3
Q[2]=T(1)^2-T(1)
> kill AA,q;
> A=lift(af,f[1 ]*f[2 ]);
> a;
6*X(3)
> A;
A[1,1]=0
A[2,1]=1
A[3,1]=0
A[4,1]=0
>  poly q=0;
> for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   };
> q;
36*X(1)^2*X(3)
> f[1]*f[2];
36*X(1)^2*X(3)
> matrix AA[n][1]=A[1..n,1];
> AA;
AA[1,1]=0
AA[2,1]=1
AA[3,1]=0
> Q = Q,ideal(T(1 )*T(2 ) - T*AA);
> Q;
Q[1]=X(1)^3+6*X(3)^3
Q[2]=T(1)^2-T(1)
Q[3]=T(1)*T(2)-T(2)
> kill AA,q;
> A=lift(af,f[1 ]*f[3 ]);
> a;
6*X(3)
>  poly q=0;
> for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   };
> f[1]*f[2];
36*X(1)^2*X(3)
> f[1]*f[3];
6*X(1)^3*X(3)
> q;
6*X(1)^3*X(3)
> matrix AA[n][1]=A[1..n,1];
> AA;
AA[1,1]=-X(3)^2
AA[2,1]=0
AA[3,1]=0
> Q = Q,ideal(T(1 )*T(3 ) - T*AA);
> q;
6*X(1)^3*X(3)
> Q;
Q[1]=X(1)^3+6*X(3)^3
Q[2]=T(1)^2-T(1)
Q[3]=T(1)*T(2)-T(2)
Q[4]=X(3)^2*T(1)+T(1)*T(3)
> kill AA,q;
> A=lift(af,f[2 ]*f[1 ]);
>  poly q=0;
> for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   };
> q;
36*X(1)^2*X(3)
> f[2]*f[1];
36*X(1)^2*X(3)
> matrix AA[n][1]=A[1..n,1];
> Q = Q,ideal(T(2 )*T(1 ) - T*AA);
> Q;
Q[1]=X(1)^3+6*X(3)^3
Q[2]=T(1)^2-T(1)
Q[3]=T(1)*T(2)-T(2)
Q[4]=X(3)^2*T(1)+T(1)*T(3)
Q[5]=T(1)*T(2)-T(2)
> kill AA,q;
> A=lift(af,f[2 ]*f[2 ]);
>  poly q=0;
> for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   };
> q;
36*X(1)^4
> f[2]*f[2];
36*X(1)^4
> matrix AA[n][1]=A[1..n,1];
> Q = Q,ideal(T(2 )*T(2 ) - T*AA);
> Q;
Q[1]=X(1)^3+6*X(3)^3
Q[2]=T(1)^2-T(1)
Q[3]=T(1)*T(2)-T(2)
Q[4]=X(3)^2*T(1)+T(1)*T(3)
Q[5]=T(1)*T(2)-T(2)
Q[6]=6*X(1)*X(3)*T(1)+T(2)^2
> kill AA,q;
> A=lift(af,f[2 ]*f[3 ]);
>  poly q=0;
> for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   };
> q;
6*X(1)^5
> f[2]*f[3];
6*X(1)^5
> matrix AA[n][1]=A[1..n,1];
> Q = Q,ideal(T(2 )*T(3 ) - T*AA);
> kill AA,q;
> A=lift(af,f[3 ]*f[1 ]);
>  poly q=0;
> for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   };
> q;
6*X(1)^3*X(3)
> f[1]*f[3];
6*X(1)^3*X(3)
> matrix AA[n][1]=A[1..n,1];
> Q = Q,ideal(T(3 )*T(1 ) - T*AA);
> Q;
Q[1]=X(1)^3+6*X(3)^3
Q[2]=T(1)^2-T(1)
Q[3]=T(1)*T(2)-T(2)
Q[4]=X(3)^2*T(1)+T(1)*T(3)
Q[5]=T(1)*T(2)-T(2)
Q[6]=6*X(1)*X(3)*T(1)+T(2)^2
Q[7]=X(1)^2*X(3)*T(1)+T(2)*T(3)
Q[8]=X(3)^2*T(1)+T(1)*T(3)
> kill AA,q;
> A=lift(af,f[3 ]*f[2 ]);
>  poly q=0;
> for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   };
> q;
6*X(1)^5
> f[3]*f[2];
6*X(1)^5
> matrix AA[n][1]=A[1..n,1];
> Q = Q,ideal(T(3 )*T(2 ) - T*AA);
> q;
6*X(1)^5
> Q;
Q[1]=X(1)^3+6*X(3)^3
Q[2]=T(1)^2-T(1)
Q[3]=T(1)*T(2)-T(2)
Q[4]=X(3)^2*T(1)+T(1)*T(3)
Q[5]=T(1)*T(2)-T(2)
Q[6]=6*X(1)*X(3)*T(1)+T(2)^2
Q[7]=X(1)^2*X(3)*T(1)+T(2)*T(3)
Q[8]=X(3)^2*T(1)+T(1)*T(3)
Q[9]=X(1)^2*X(3)*T(1)+T(2)*T(3)
> kill AA,q;
> A=lift(af,f[3 ]*f[3 ]);
>  poly q=0;
> for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   };
> q;
X(1)^6
> f[3]*f[3];
X(1)^6
> f;
f[1]=6*X(3)
f[2]=6*X(1)^2
f[3]=X(1)^3
> matrix AA[n][1]=A[1..n,1];
> Q = Q,ideal(T(3 )*T(3 ) - T*AA);
> Q;
Q[1]=X(1)^3+6*X(3)^3
Q[2]=T(1)^2-T(1)
Q[3]=T(1)*T(2)-T(2)
Q[4]=X(3)^2*T(1)+T(1)*T(3)
Q[5]=T(1)*T(2)-T(2)
Q[6]=6*X(1)*X(3)*T(1)+T(2)^2
Q[7]=X(1)^2*X(3)*T(1)+T(2)*T(3)
Q[8]=X(3)^2*T(1)+T(1)*T(3)
Q[9]=X(1)^2*X(3)*T(1)+T(2)*T(3)
Q[10]=-X(3)^4*T(1)+T(3)^2
> ideal fi = f,i;
> fi;
fi[1]=6*X(3)
fi[2]=6*X(1)^2
fi[3]=X(1)^3
fi[4]=X(1)^3+6*X(3)^3
> matrix syzfi=matrix(syz(fi));
> syzfi;
syzfi[1,1]=X(3)^2
syzfi[1,2]=-X(1)^2
syzfi[2,1]=0
syzfi[2,2]=X(3)
syzfi[3,1]=1
syzfi[3,2]=0
syzfi[4,1]=-1
syzfi[4,2]=0
> matrix syzfii[n][n]=syzfi[1..n,1..n];                            //---mit a = 6z in homjj(i,j) geht es nicht
   ? wrong range[1,3] in matrix syzfi(4 x 2)
   ? error occurred in or before STDIN line 1612: `matrix syzfii[n][n]=syzfi[1..n,1..n];`
   ? expected matrix-expression. type 'help matrix;'
> 
> ideal i=x3+6z3;
> ideal j=testideal(i);
> list h=homjj(i,j);
> h;                                                               //---mit a = -x in homjj(i,j) geht es soweit
[1]:                                                                        
   //   coeff. ring is : Integers
//   number of vars : 5
//        block   1 : ordering dp
//                  : names    X(1) X(2) X(3) T(2) T(3)
//        block   2 : ordering C
[2]:
   homj
[3]:
   endphi
[4]:
   1
> mynormal(i);
// ** _ is no standard basis
// ** _ is no standard basis
// ** redefining ns **
   ? `int`(k) = `bigint` is not supported
   ? expected `int` = `int`
   ? expected `int` = `intmat`
   ? error occurred in or before ::myradical line 18: `int k=432081216000;`
   ? expected int-expression. type 'help int;'
   ? leaving ::myradical
   skipping text from `;` error at token `)`
   ? leaving ::myradical
   ? leaving ::testideal
   ? leaving ::mynormal
   ? leaving ::mynormal
. ;
> h;
[1]:
   //   coeff. ring is : Integers
//   number of vars : 5
//        block   1 : ordering dp
//                  : names    X(1) X(2) X(3) T(2) T(3)
//        block   2 : ordering C
[2]:
   homj
[3]:
   endphi
[4]:
   1
> def r1=h[1];
> setring r1;
> homj;
homj[1]=-6*X(1)-T(2)
homj[2]=-35*T(3)^2
homj[3]=-36*X(3)*T(3)+T(2)*T(3)
homj[4]=-T(2)^2-36*T(3)
homj[5]=-X(1)*T(2)+6*T(3)
homj[6]=-36*X(3)^2+T(2)^2
homj[7]=-X(1)^2-T(3)
homj[8]=X(3)*T(3)^2-36*T(2)*T(3)^2
homj[9]=-X(1)*T(3)^2-6*T(2)*T(3)^2
homj[10]=X(3)*T(2)*T(3)+36*T(3)^2
homj[11]=-X(3)^2*T(3)-T(3)^2
homj[12]=-X(3)^2*T(2)-T(2)*T(3)
homj[13]=-6*X(3)^3+X(1)*T(3)
> list e=elimvar(homj);
// ** _ is no standard basis
// ** _ is no standard basis
// ** redefining ns **
> e;
[1]:
   //   coeff. ring is : Integers
//   number of vars : 3
//        block   1 : ordering dp
//                  : names    X(1) X(2) X(3)
//        block   2 : ordering C
[2]:
   eli
[3]:
   ephi
[4]:
   1
> def r2=e[1];
> setring r2;
> eli;
eli[1]=-35*X(1)^4
eli[2]=6*X(1)^3+36*X(1)^2*X(3)
eli[3]=36*X(1)^2-36*X(3)^2
eli[4]=216*X(1)^5+X(1)^4*X(3)
eli[5]=35*X(1)^5
eli[6]=36*X(1)^4+6*X(1)^3*X(3)
eli[7]=-X(1)^4+X(1)^2*X(3)^2
eli[8]=-6*X(1)^3+6*X(1)*X(3)^2
eli[9]=-X(1)^3-6*X(3)^3
> proc isnor(ideal i)
{       def BAS = basering;

        if (dim(i) == -1)
        {
            int isn = 1; 
            return(isn);
        }

        ideal j = testideal(i);
        qring q = std(i);
        setring q;
        ideal j = fetch(BAS,j);
        poly a = j[1];
	ideal aJJ=quotient(a*j,j);            
	aJJ=std(aJJ);
	ideal aa=a;
	aa=std(aa);
	ideal rf = interred(reduce(aJJ,aa));

	if (size(rf)==0)
        {
         int isn = 1;
        }
         
        else
        {
         int isn = 0;
        }

        return(isn);
        setring BAS;
};
> isnor(eli);
// ** i is no standard basis
   ? `int`(k) = `bigint` is not supported
   ? expected `int` = `int`
   ? expected `int` = `intmat`
   ? error occurred in or before ::myradical line 18: `int k=432081216000;`
   ? expected int-expression. type 'help int;'
   ? leaving ::myradical
   skipping text from `;` error at token `)`
   ? leaving ::myradical
   ? leaving ::testideal
   ? leaving ::isnor
. ;
> proc isprimZ(ideal i)
{
  list p =  minAssZ(i);
  int j;
  if(size(p) == 1)
  { j=1;}
  return(j);
};
> isprimZ(eli);
0
> setring r;
> isprimZ(i);
1
> j;
j[1]=6z
j[2]=-x
> j=std(j);
> j;
j[1]=6z
j[2]=-x
> setring r2;
> eli;
eli[1]=-35*X(1)^4
eli[2]=6*X(1)^3+36*X(1)^2*X(3)
eli[3]=36*X(1)^2-36*X(3)^2
eli[4]=216*X(1)^5+X(1)^4*X(3)
eli[5]=35*X(1)^5
eli[6]=36*X(1)^4+6*X(1)^3*X(3)
eli[7]=-X(1)^4+X(1)^2*X(3)^2
eli[8]=-6*X(1)^3+6*X(1)*X(3)^2
eli[9]=-X(1)^3-6*X(3)^3
> ideal j=testideal(eli);
   ? `int`(k) = `bigint` is not supported
   ? expected `int` = `int`
   ? expected `int` = `intmat`
   ? error occurred in or before ::myradical line 18: `int k=432081216000;`
   ? expected int-expression. type 'help int;'
   ? leaving ::myradical
   skipping text from `;` error at token `)`
   ? leaving ::myradical
   ? leaving ::testideal
. ;
> eli=std(eli);
> eli;
eli[1]=36*X(1)^2-36*X(3)^2
eli[2]=-6*X(1)*X(3)^2-36*X(3)^3
eli[3]=-X(1)^3-6*X(3)^3
eli[4]=-1260*X(3)^4
eli[5]=X(1)^2*X(3)^2-36*X(3)^4
eli[6]=210*X(3)^5
> isprimZ(eli);
0
> minAssZ(eli);
[1]:
   _[1]=X(3)
   _[2]=X(1)
[2]:
   _[1]=2
   _[2]=X(1)
[3]:
   _[1]=3
   _[2]=X(1)
[4]:
   _[1]=5
   _[2]=X(1)+X(3)
[5]:
   _[1]=7
   _[2]=X(1)+6*X(3)
> myheight(eli);
2
> ideal j = minor(jacob(eli),2);
// ** redefining j **
> j;
j[1]=-864*X(1)^2*X(3)-7776*X(1)*X(3)^2-432*X(3)^3
j[2]=-216*X(1)^2*X(3)-1296*X(1)*X(3)^2
j[3]=-36*X(1)^3*X(3)-324*X(1)^2*X(3)^2+108*X(3)^4
j[4]=-362880*X(1)*X(3)^3
j[5]=30240*X(3)^5
j[6]=15120*X(1)^2*X(3)^3
j[7]=144*X(1)^3*X(3)-10224*X(1)*X(3)^3
j[8]=12*X(1)^2*X(3)^3+216*X(1)*X(3)^4+864*X(3)^5
j[9]=-6*X(1)^4*X(3)+432*X(1)^2*X(3)^3+36*X(1)*X(3)^4
j[10]=10080*X(1)*X(3)^5
j[11]=75600*X(1)*X(3)^4
j[12]=-6300*X(3)^6
j[13]=-3150*X(1)^2*X(3)^4
j[14]=2100*X(1)*X(3)^6
> jacob(eli);
_[1,1]=72*X(1)
_[1,2]=0
_[1,3]=-72*X(3)
_[2,1]=-6*X(3)^2
_[2,2]=0
_[2,3]=-12*X(1)*X(3)-108*X(3)^2
_[3,1]=-3*X(1)^2
_[3,2]=0
_[3,3]=-18*X(3)^2
_[4,1]=0
_[4,2]=0
_[4,3]=-5040*X(3)^3
_[5,1]=2*X(1)*X(3)^2
_[5,2]=0
_[5,3]=2*X(1)^2*X(3)-144*X(3)^3
_[6,1]=0
_[6,2]=0
_[6,3]=1050*X(3)^4
> ideal tmp=eli,j;
> tmp;
tmp[1]=36*X(1)^2-36*X(3)^2
tmp[2]=-6*X(1)*X(3)^2-36*X(3)^3
tmp[3]=-X(1)^3-6*X(3)^3
tmp[4]=-1260*X(3)^4
tmp[5]=X(1)^2*X(3)^2-36*X(3)^4
tmp[6]=210*X(3)^5
tmp[7]=-864*X(1)^2*X(3)-7776*X(1)*X(3)^2-432*X(3)^3
tmp[8]=-216*X(1)^2*X(3)-1296*X(1)*X(3)^2
tmp[9]=-36*X(1)^3*X(3)-324*X(1)^2*X(3)^2+108*X(3)^4
tmp[10]=-362880*X(1)*X(3)^3
tmp[11]=30240*X(3)^5
tmp[12]=15120*X(1)^2*X(3)^3
tmp[13]=144*X(1)^3*X(3)-10224*X(1)*X(3)^3
tmp[14]=12*X(1)^2*X(3)^3+216*X(1)*X(3)^4+864*X(3)^5
tmp[15]=-6*X(1)^4*X(3)+432*X(1)^2*X(3)^3+36*X(1)*X(3)^4
tmp[16]=10080*X(1)*X(3)^5
tmp[17]=75600*X(1)*X(3)^4
tmp[18]=-6300*X(3)^6
tmp[19]=-3150*X(1)^2*X(3)^4
tmp[20]=2100*X(1)*X(3)^6
> myradical(tmp);
   ? `int`(k) = `bigint` is not supported
   ? expected `int` = `int`
   ? expected `int` = `intmat`
   ? error occurred in or before ::myradical line 18: `int k=432081216000;`
   ? expected int-expression. type 'help int;'
   ? leaving ::myradical
   skipping text from `;` error at token `)`
   ? leaving ::myradical
. ;
> setring r1;
> isprimZ(homj);
0
>
