                     SINGULAR                                 /
 A Computer Algebra System for Polynomial Computations       /   version 3-1-2
                                                           0<
 by: W. Decker, G.-M. Greuel, G. Pfister, H. Schoenemann     \   Oct 2010
FB Mathematik der Universitaet, D-67653 Kaiserslautern        \
> LIB "all.lib";
LIB "primdecint.lib";

proc mydimension(ideal i) 
{
  i = std(i);
  def BAS = basering;
  ideal r = 1;

  if(size(i) == 0)
  {        
     return(nvars(BAS)+1);
  }
        
  if (reduce(r,i) == 0)
  {       
     return(-1);
  }
           
  if (charstr(BAS)=="integer")
  {
     if (deg(i[1]) == 0)
     {
	ideal i_ = i[2..size(i)];
	ring r = 0,x(1..nvars(BAS)),dp;
	ideal ii = fetch(BAS,i_);
	ii = std(ii);
	return(dim(ii));
     }
	
     if (deg(i[size(i)]) == 0)
     {
	ideal i_ = i[1..size(i)-1] ;
	ring r = 0,x(1..nvars(BAS)),dp;
	ideal ii = fetch(BAS,i_);
	ii = std(ii);
	return(dim(ii));
     }

     ring r = 0,x(1..nvars(BAS)),dp;
     ideal ii =fetch(BAS,i);
     ii = std(ii);
     return(dim(ii)+1);
  }
  else
  {
     return(dim(i));
  }
}

proc myheight(i) 
{
  i=std(i);
  if(charstr(basering)=="integer")
  {
     return(nvars(basering)+1-mydimension(i));
  }
  else
  {
     return(nvars(basering)-dim(i));
  }
}

proc myintersect(ideal i, ideal j) 
{
  i=std(i);
  j=std(j);
  def BAS = basering;
  if (charstr(BAS)=="integer")
  {
     string tempstr="ring r2=integer,("+varstr(BAS)+",t),dp;";
  }
  else
  {
     string tempstr="ring r2="+charstr(BAS)+",("varstr(BAS)+",t),dp;";
  }
	
  execute(tempstr);
  ideal J = 0;
  int k;
  ideal ii=fetch(BAS,i);
  for(k=1; k <= size(ii); k++)
  {
     J=J,t*ii[k];
  }
  ideal jj=fetch(BAS,j);
  for(k=1; k <= size(jj); k++)
  {
     J=J,(1-t)*jj[k];
  }
  ideal e=eliminate(J,t);
  setring BAS;
  return(fetch(r2,e));
}

proc mysat(ideal i, poly f)
{
  def BAS = basering	;
  ring newR = integer,(X(1..nvars(BAS)),T),dp ;
  map psi=BAS,maxideal(1);
  ideal Q=psi(i),1-T*psi(f);
  Q=std(Q);
  ideal e=eliminate(Q,T);
  setring BAS;
  ideal result=fetch(newR,e);
  return(result);
}

proc myradical(ideal i) 
{
  i=std(i);
  def BAS = basering;
  if (charstr(BAS)=="integer")
  {
     int j;
     poly p = 1;
     for(j = 1;j<=nvars(BAS);j++)
     {
        p = p*var(j);
     }
     ideal e = eliminate(i,p);
     ideal radi=1;
     if(e[1]==1 || e[1] == -1)
     {
	return(radi);
     }
     if(e[1]!=0)
     {
	string tempstr="int k="+string(e[1])+";";
	execute(tempstr);
	list prdiv = primefactors(k)[1];
	for(j=1; j <= size(prdiv); j++)
	{
	   ring rj = prdiv[j],x(1..nvars(BAS)),dp;
	   ideal radij = radical(fetch(BAS,i));
	   radij = std(radij);
	   setring BAS;
	   ideal radij2=fetch(rj,radij);
	   radij2=radij2,prdiv[j];
	   radij2 = std(radij2);
	   radi=myintersect(radi,radij2);
           kill rj,radij2;
	}
     }
     else
     {
	poly g=1;
	for(j=1; j<= size(i); j++)
	{
	   g = g*leadcoef(i[j]);
	}
	ideal rig = i,g;
	rig=myradical(rig);
	ring rq=0,x(1..nvars(BAS)),dp;
	ideal riq=radical(fetch(BAS,i));
	riq=std(riq);
	ideal B;
	for(j=1;j<=size(riq);j++)
	{
	   B[j]=cleardenom(riq[j]);
	}
	poly s=1;
	for(j=1;j<=size(B);j++)
	{
	   s=s*leadcoef(B[j]);
	}
	setring BAS;
	ideal riginf=mysat(fetch(rq,B),fetch(rq,s));
	radi=myintersect(rig,riginf);
     }
	return(radi);
  } 
  else 
  {
     return(radical(i));
  }
}

proc myquotient(i,j1,j2) 
{
  def BAS=basering;
  int j;
  ideal q=1;
             
  for(j=1; j <= size(j2); j++)
  {
     ideal s = j2[j],-j1,-i;
     matrix m = matrix(syz(s));
     m = m[1,1..ncols(m)];
     matrix n[1][ncols(m)] = m[1,1..ncols(m)];
     ideal qq = n;
     q = intersect(q,qq);
     kill m,n,qq,s;
  }
  return(std(q));
}

proc homjj(i,j) 
{
  def BAS = basering;
  poly a=j[1];
  ideal aJJ=myquotient(i,a*j,j),i;            
  aJJ=std(aJJ);
  ideal aa=a;
  aa=std(aa);
  ideal rf = interred(reduce(aJJ,aa));

  if (size(rf)==0) 
  {                                      // j[1]*j:j = ideal(j[1]) modulo i                  
     ideal homj=i;
     ideal endphi=maxideal(1);
     export(homj);
     export(endphi);
     list result=BAS,"homj","endphi",0;
     return(result);
  } 
  else 
  {
     ideal f=j[1],rf;
     int n = size(f);

     ring newR1 = integer,(X(1..nvars(BAS)),T(1..n)),dp;

     ideal f=fetch(BAS,f);
     ideal i=fetch(BAS,i);
     ideal Q=i;
     poly a=fetch(BAS,a);
     ideal af=a*f,i;

     matrix T=matrix(ideal(T(1..n)),1,n);
     int ii,jj,kk;
     matrix A;
     for(ii=2;ii<=n;ii++) 
     {
	for(jj=2;jj<=ii;jj++) 
        {
	   A=lift(af,f[ii]*f[jj]);
//--- lift function is only working up to sign!
	   poly q=0;
	   for(kk=1;kk<=size(af);kk++)
	   {
	      q=q+af[kk]*A[kk,1];
	   }
				
	   if (q == f[ii]*f[jj])
	   {
	      matrix AA[n][1]=A[1..n,1];
	   }
	   else
	   {
	      matrix AA[n][1]=-A[1..n,1];
	   }
                               
	   Q = Q,ideal(T(ii)*T(jj) - T*AA);
           kill AA;
           kill q;
	}
     }

     ideal fi = f,i;
     matrix syzfi=matrix(syz(fi));
     matrix syzfii[n][n]=syzfi[1..n,1..n];

     Q = Q,ideal(T*syzfii);
     Q = subst(Q,T(1),1);
                
     ring newR2 = integer,(X(1..nvars(BAS)),T(2..n)),dp;

     ideal homj = imap(newR1,Q);
     homj = std(homj);
     ideal endphi = ideal(X(1..nvars(BAS)));
     export(homj);
     export(endphi);
     list result = newR2,"homj","endphi",1;
     return(result);
  }
}

proc testideal(ideal i) 
{
  if(i == 0)
  {
     ideal result = 1;
     return(result);
  }

  i=std(i);
  ideal j = minor(jacob(i),myheight(i));
  ideal tmp = i,j;
  ideal result = myradical(tmp);
  return(result);
}

proc elimvar(ideal i)
{
	def BAS=basering;
	int n=size(i);
	int j;

        if (defined(phi))
        {ideal endphi=phi; kill phi;}

        poly tt;
        int pos;
        for(j=1;j<=n;j++)
	{                
		// --- Schauen, ob lineare Monome in i[j] existieren
	        tt=jet(i[j],1)-jet(i[j],0);
		  // --- Monome gefunden
		pos=0;
		int k;
		for(k=1;k<=size(tt);k++)
		{
			if ((leadcoef(tt[k]) == 1 || leadcoef(tt[k]) == -1) && (pos == 0))
			{
				pos=k;
			}
		}
                kill k;

            if (pos > 0)
            { 
		poly t=tt[pos];
                kill tt;
                kill pos;
		if (deg(t) > 0 && (leadcoef(t) == 1 || leadcoef(t) == -1))
		{
			poly v=leadcoef(t)*t;
                        attrib(v,"isSB",1);
			int b = 0;
			int k;
			poly rest=i[j]-t;

			for(k=1;k<=size(rest);k++)
			{
				if (reduce(rest[k],v) == 0)
				{
					b = 1;
				}
			}
                        kill k;
			if (b == 0)
			{
				if (leadcoef(t) == 1)
				{
					poly replace=-(i[j]-t);
				}
				else
				{
					poly replace=i[j]-t;       
				}
                                kill j;
                                ideal QQ = subst(i,v,replace);
                                QQ=simplify(QQ,2);
                                ideal phi=subst(endphi,t,replace);
                                string s=varstr(BAS);
				string strv = string(v);
				int p=find(s,strv);               

				if (p > 1 && p < size(s))
				{
					string ns=string(s[1..p-1])+string(s[p+1+size(strv)..size(s)]);
				}

				if (p == 1)
				{
					string ns=string(s[2+size(strv)..size(s)]);
				}
				
				if (p+size(strv)-1 == size(s))
				{
					string ns=string(s[1..size(s)-size(strv)-1]);
				}
				
				string tmpstr="ring newR1 = integer,("+ns+"),dp;";

				execute(tmpstr);
				ideal i=imap(BAS,QQ);
                                ideal phi=imap(BAS,phi);
                                export(phi);
				list result=elimvar(i);
				result[4]=1;				
			        setring BAS;
				return (result);
			}
		}
            }
	}
	ideal eli=i;
	export(eli);
        ideal ephi=endphi;
        export(ephi);
	list result = BAS,"eli","ephi",0;
	return(result);
}


proc getGenerators(ideal J, ideal U, poly c)
{
//--- Computes the generators of J as an ideal in the original quotient-ring r/i,
//--- where J is given by generators in the new ring.
//--- The new ring is given by 1/c * U (U = myquotient(i,p*j,j)) in the total ring of fractions.

  int i, j;                             
  int dbg = printlevel - voice + 2;     // dbg = printlevel (default: dbg = 0)
  poly p;                               // The lifted polynomial
  ideal Jstd = std(J);                  // standard base of J

  if(dbg>1){"Checking for new generators...";}
  for(i = 1; i <= ncols(J); i++)
  {
    for(j = 1; j <= ncols(U); j++)
    {
      p = lift(c, J[i]*U[j])[1,1];
      p = reduce(p, Jstd);
      if(p != 0)
      {
        if(dbg>1)
        {
          "New polynomial added:", p;
          if(dbg>4) {pause();}
        }
        Jstd = Jstd, p;
        Jstd = std(Jstd);
        J = J, p;
      }
    }
  }
  return(J);
}


proc mynormal(ideal i) 
{
	def BAS=basering;
	ideal j=testideal(i);                                           
        list h=homjj(i,j);

	if (h[4] == 0)
	{
		def NewR = h[1];
		setring NewR;
		ideal nor = homj;

                if (defined(ephi))
                {ideal normap = ephi;}
                else
                {ideal normap = endphi;}

     
		export(nor);
                export(normap);
		list result = BAS,"nor","normap";
		setring BAS;
		return(result);
	}
	else
	{
                def NewR = h[1];
		setring NewR;
		list e = elimvar(homj);
		def NewR1 = e[1];
		setring NewR1;
                ideal i = std(eli);
                ideal ii = fetch(BAS,i);
                ii = std(ii);
                ideal c1 = interred(reduce(ii,i));
                ideal c2 = interred(reduce(i,ii));

                if (size(c1)==0 && size(c2)==0)
                {
                ideal nor = i;
                export(nor);
                ideal normap = ephi;
                export(normap);
                list result = NewR1,"nor","normap";
                setring BAS;
                return(result);
                }

                else
                {
		list result = mynormal(i);
		setring BAS;
                return(result);
                }
              
	}
	
}

proc normalZ2(ideal i)
{                                                                          // AM 8.9.GEÄNDERT!
    def BAS = basering;
  ideal irad = myradical(i);

  if(size(reduce(irad,std(i))) != 0)
  {
     "WARNING! The input is not reduced!";
     "We will continue with the reduced part of input";
     i=irad;
  }

  list A = minAssZ(i);
  int k = size(A);
  int j;
  list NL;
  for(j=1;j<=k;j++)
  { 
     ideal api = A[j];
     if (deg(NM[1]) == 0)
     {
        int p = int(api[1]);
        ring rnew = p,x(1..nvars(BAS)),dp; 
        ideal api = fetch(BAS,api);
        list n = normal(api);
        def r1 = n[1][1];
        setring r1;
        ideal nor = norid;
        export(nor);
        NL[j] = r1,"nor","normap";
        setring BAS;
        kill p,rnew,api,r1;
     }

     else  
     {      
        NL[j] = mynormal(api);
        kill api;
     }
  }
  return(NL);
}

proc normalZ(ideal i)
{                                                                          // ohne integers
  def BAS = basering;
  list L = minAssZ(i);
  ideal irad = radical(i);
  if(size(reduce(irad,std(i))) != 0)
  {
     "WARNING! The input is not reduced!";
     "We will continue with the reduced part of input";
     i = irad;
  }

  int n = size(L);
  int j;
  list NL;
  for(j=1;j<=n;j++)
  {
     ideal api = L[j][2];     
     NL[j] = mynormal(api);
     kill api;
  }

  return(NL);
};

// ** loaded /usr/share/Singular/LIB/all.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/qmatrix.lib (13334,2010-09-29)
// ** loaded /usr/share/Singular/LIB/perron.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/nctools.lib (13467,2010-10-13)
// ** loaded /usr/share/Singular/LIB/ncdecomp.lib (12790,2010-05-14)
// ** loaded /usr/share/Singular/LIB/ncalg.lib (13403,2010-10-06)
// ** loaded /usr/share/Singular/LIB/involut.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/gkdim.lib (12235,2009-11-03)
// ** loaded /usr/share/Singular/LIB/freegb.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/dmodvar.lib (13492,2010-10-14)
// ** loaded /usr/share/Singular/LIB/dmodapp.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/dmod.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/central.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/bfun.lib (13483,2010-10-13)
// ** loaded /usr/share/Singular/LIB/zeroset.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/weierstr.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/tropical.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/triang.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/toric.lib (12330,2009-11-26)
// ** loaded /usr/share/Singular/LIB/teachstd.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/surfex.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/surf.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/stratify.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/spectrum.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/spcurve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/solve.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/signcond.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/sing4ti2.lib (13269,2010-09-23)
// ** loaded /usr/share/Singular/LIB/sing.lib (12394,2010-01-04)
// ** loaded /usr/share/Singular/LIB/sheafcoh.lib (13328,2010-09-29)
// ** loaded /usr/share/Singular/LIB/sagbi.lib (13505,2010-10-15)
// ** loaded /usr/share/Singular/LIB/rootsur.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/rootsmr.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/rinvar.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/ring.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/reszeta.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/resolve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/resgraph.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/resbin.lib $Id: resbin.lib$
// ** loaded /usr/share/Singular/LIB/reesclos.lib (1.32,2001/01/16)
// ** loaded /usr/share/Singular/LIB/redcgs.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/realrad.lib (13352,2010-09-30)
// ** loaded /usr/share/Singular/LIB/random.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/qhmoduli.lib (12790,2010-05-14)
// ** loaded /usr/share/Singular/LIB/primitiv.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/primdec.lib (13403,2010-10-06)
// ** loaded /usr/share/Singular/LIB/presolve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/polymake.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/poly.lib (12443,2010-01-19)
// ** loaded /usr/share/Singular/LIB/pointid.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/phindex.lib (12571,2010-03-01)
// ** loaded /usr/share/Singular/LIB/ntsolve.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/normaliz.lib (12790,2010-05-14)
// ** loaded /usr/share/Singular/LIB/normal.lib (13488,2010-10-14)
// ** loaded /usr/share/Singular/LIB/noether.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/mregular.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/mprimdec.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/monomialideal.lib (13403,2010-10-06)
// ** loaded /usr/share/Singular/LIB/mondromy.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/modstd.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/matrix.lib (12898,2010-06-23)
// ** loaded /usr/share/Singular/LIB/makedbm.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/lll.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/linalg.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/latex.lib (13477,2010-10-13)
// ** loaded /usr/share/Singular/LIB/kskernel.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/jacobson.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/intprog.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/inout.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/hyperel.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/homolog.lib (12381,2009-12-11)
// ** loaded /usr/share/Singular/LIB/hnoether.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/grwalk.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/groups.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/graphics.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/gmssing.lib (13548,2010-10-19)
// ** loaded /usr/share/Singular/LIB/gmspoly.lib (12529,2010-02-08)
// ** loaded /usr/share/Singular/LIB/general.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/finvar.lib (13326,2010-09-29)
// ** loaded /usr/share/Singular/LIB/equising.lib (13483,2010-10-13)
// ** loaded /usr/share/Singular/LIB/elim.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/deform.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/decodegb.lib (13483,2010-10-13)
// ** loaded /usr/share/Singular/LIB/curvepar.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/crypto.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/control.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/compregb.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/classify.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/cimonom.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/brnoeth.lib (13312,2010-09-29)
// ** loaded /usr/share/Singular/LIB/atkins.lib (12932,2010-06-30)
// ** loaded /usr/share/Singular/LIB/assprimeszerodim.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/arcpoint.lib (12231,2009-11-02)
// ** loaded /usr/share/Singular/LIB/algebra.lib (12436,2010-01-15)
// ** loaded /usr/share/Singular/LIB/alexpoly.lib (13499,2010-10-15)
// ** loaded /usr/share/Singular/LIB/aksaka.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/ainvar.lib (13536,2010-10-18)
// ** loaded /usr/share/Singular/LIB/absfact.lib (13534,2010-10-18)
// ** loaded /usr/share/Singular/LIB/primdecint.lib (13403,2010-10-06)
. ;
> ring r=integers,(x,y,z),dp;
   ? Wrong ground field specification
   ? cannot make ring
   ? error occurred in or before STDIN line 1397: `ring r=integers,(x,y,z),dp;`
   ? expected ring-expression. type 'help ring;'
> ring r=integers,(x,y,z),dp;
   ? Wrong ground field specification
   ? cannot make ring
   ? error occurred in or before STDIN line 1398: `ring r=integers,(x,y,z),dp;`
   ? expected ring-expression. type 'help ring;'
> ring r=integer,(x,y,z),dp;
// ** You are using coefficient rings which are not fields.
// ** Please note that only limited functionality is available
// ** for these coefficients.
// ** 
// ** The following commands are meant to work:
// ** - basic polynomial arithmetic
// ** - std
// ** - syz
// ** - lift
// ** - reduce
> ideal i=x3z+6z4,3xy;
> std(i);
_[1]=3xy
_[2]=x3z+6z4
_[3]=18yz4
> myradical(i);
_[1]=6yz
_[2]=-3xy
_[3]=-xyz
_[4]=x3z+6z4
> minAssZ(i);
[1]:
   _[1]=z
   _[2]=y
[2]:
   _[1]=y
   _[2]=x3+6z3
[3]:
   _[1]=z
   _[2]=x
[4]:
   _[1]=2
   _[2]=x
[5]:
   _[1]=3
   _[2]=z
[6]:
   _[1]=3
   _[2]=x
> primdecZ(i);
[1]:
   [1]:
      _[1]=y
      _[2]=x3+6z3
   [2]:
      _[1]=y
      _[2]=x3+6z3
[2]:
   [1]:
      _[1]=z
      _[2]=y
   [2]:
      _[1]=z
      _[2]=y
[3]:
   [1]:
      _[1]=x
      _[2]=z4
   [2]:
      _[1]=z
      _[2]=x
[4]:
   [1]:
      _[1]=2
      _[2]=x
   [2]:
      _[1]=2
      _[2]=x
[5]:
   [1]:
      _[1]=3
      _[2]=z
   [2]:
      _[1]=3
      _[2]=z
[6]:
   [1]:
      _[1]=9
      _[2]=3x
      _[3]=x3+6z3
   [2]:
      _[1]=3
      _[2]=x
> i=myradical(i);
> normalZ2(i);
   ? `NM` is not defined
   ? error occurred in or before ::normalZ2 line 41: `j++;`
   ? leaving ::normalZ2
   skipping text from `;` error at token `)`
> proc normalZ(ideal i)
{                                                                          // AM 8.9.GEÄNDERT!
    def BAS = basering;
  ideal irad = myradical(i);

  if(size(reduce(irad,std(i))) != 0)
  {
     "WARNING! The input is not reduced!";
     "We will continue with the reduced part of input";
     i=irad;
  }

  list A = minAssZ(i);
  int k = size(A);
  int j;
  list NL;
  for(j=1;j<=k;j++)
  { 
     ideal api = A[j];
     if (deg(api[1]) == 0)
     {
        int p = int(api[1]);
        ring rnew = p,x(1..nvars(BAS)),dp; 
        ideal api = fetch(BAS,api);
        list n = normal(api);
        def r1 = n[1][1];
        setring r1;
        ideal nor = norid;
        export(nor);
        NL[j] = r1,"nor","normap";
        setring BAS;
        kill p,rnew,api,r1;
     }

     else  
     {      
        NL[j] = mynormal(api);
        kill api;
     }
  }
  return(NL);
};
// ** redefining normalZ **
> normalZ(i);
// ** redefining homj
// ** redefining endphi
// ** redefining nor
// ** redefining normap
// ** _ is no standard basis
// ** redefining ns **
   ? 2nd module does not lie in the first
   ? error occurred in or before ::homjj line 38: `	   A=lift(af,f[ii]*f[jj]);`
   ? leaving ::homjj
   skipping text from `;` error at token `)`
   ? leaving ::mynormal
   ? leaving ::mynormal
   ? leaving ::normalZ
> proc normalZ(ideal i)
{                                                                          // AM 8.9.GEÄNDERT!
    def BAS = basering;
  ideal irad = myradical(i);

  if(size(reduce(irad,std(i))) != 0)
  {
     "WARNING! The input is not reduced!";
     "We will continue with the reduced part of input";
     i=irad;
  }

  list A = minAssZ(i);
  int k = size(A);
  int j;
  list NL;
  for(j=1;j<=k;j++)
  { 
     ideal api = A[j];
     api;
     if (deg(api[1]) == 0)
     {
        "field";
        int p = int(api[1]);
        ring rnew = p,x(1..nvars(BAS)),dp; 
        ideal api = fetch(BAS,api);
        list n = normal(api);
        def r1 = n[1][1];
        setring r1;
        ideal nor = norid;
        export(nor);
        NL[j] = r1,"nor","normap";
        setring BAS;
        kill p,rnew,api,r1;
     }

     else  
     {   
        "integers";   
        NL[j] = mynormal(api);
        kill api;
     }
  }
  return(NL);
};
// ** redefining normalZ **
> normalZ(i);
api[1]=z
api[2]=y
integers
// ** redefining homj
// ** redefining endphi
// ** redefining nor
// ** redefining normap
api[1]=z
api[2]=x
integers
// ** redefining homj
// ** redefining endphi
// ** redefining nor
// ** redefining normap
api[1]=y
api[2]=x3+6z3
integers
// ** _ is no standard basis
// ** redefining ns **
   ? 2nd module does not lie in the first
   ? error occurred in or before ::homjj line 38: `	   A=lift(af,f[ii]*f[jj]);`
   ? leaving ::homjj
   skipping text from `;` error at token `)`
   ? leaving ::mynormal
   ? leaving ::mynormal
   ? leaving ::normalZ
> ideal i=y,x3+6z3;
// ** redefining i **
> myradical(i);
_[1]=y
_[2]=x3+6z3
> ideal j=testideal(i);
> j;
j[1]=6z
j[2]=-y
j[3]=-x
> list h=homjj(i,j);
> h;
[1]:
   //   coeff. ring is : Integers
//   number of vars : 6
//        block   1 : ordering dp
//                  : names    X(1) X(2) X(3) T(2) T(3) T(4)
//        block   2 : ordering C
[2]:
   homj
[3]:
   endphi
[4]:
   1
> def r1=h[1];
> setring r1;
> homj;
homj[1]=T(2)
homj[2]=X(2)
homj[3]=X(3)^2+T(4)
homj[4]=6*X(1)*X(3)+T(3)^2
homj[5]=-X(1)^2+X(3)*T(3)
homj[6]=X(1)*T(3)*T(4)-6*T(4)^2
homj[7]=T(3)^3+36*X(3)*T(4)
homj[8]=X(3)*T(3)^2-6*X(1)*T(4)
homj[9]=X(1)*T(3)^2-6*T(3)*T(4)
homj[10]=-X(1)*X(3)*T(3)+6*X(3)*T(4)
> list e=elimvar(homj);
// ** _ is no standard basis
// ** redefining ns **
> e;
[1]:
   //   coeff. ring is : Integers
//   number of vars : 3
//        block   1 : ordering dp
//                  : names    X(1) X(3) T(3)
//        block   2 : ordering C
[2]:
   eli
[3]:
   ephi
[4]:
   1
> def r11=e[1];
> setring r11;
> eli;
eli[1]=6*X(1)*X(3)+T(3)^2
eli[2]=-X(1)^2+X(3)*T(3)
eli[3]=-6*X(3)^4-X(1)*X(3)^2*T(3)
eli[4]=-36*X(3)^3+T(3)^3
eli[5]=6*X(1)*X(3)^2+X(3)*T(3)^2
eli[6]=6*X(3)^2*T(3)+X(1)*T(3)^2
eli[7]=-6*X(3)^3-X(1)*X(3)*T(3)
> setring r;
> mynormal(i);
// ** _ is no standard basis
// ** redefining ns **
   ? 2nd module does not lie in the first
   ? error occurred in or before ::homjj line 38: `	   A=lift(af,f[ii]*f[jj]);`
   ? leaving ::homjj
   skipping text from `;` error at token `)`
   ? leaving ::mynormal
   ? leaving ::mynormal
> i;
i[1]=y
i[2]=x3+6z3
> 